import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport WalletConnection from './components/WalletConnection';\nimport ContractInfo from './components/ContractInfo';\nimport EnvelopeCreator from './components/EnvelopeCreator';\nimport EnvelopeViewer from './components/EnvelopeViewer';\nimport { useWallet } from './hooks/useWallet';\nimport { useContract } from './hooks/useContract';\nimport { TEXT } from './config/text';\n\nconst App: React.FC = () => {\n  const { account, provider, isConnecting, connectWallet, disconnectWallet } = useWallet();\n  const { \n    loading, \n    createEnvelope, \n    claimEnvelope, \n    getEnvelope, \n    hasUserClaimed, \n    getTotalEnvelopes,\n    contractAddress \n  } = useContract(provider);\n  \n  const [totalEnvelopes, setTotalEnvelopes] = useState<number>(0);\n  const [lastUpdateTime, setLastUpdateTime] = useState<number>(Date.now());\n\n  const fetchTotalEnvelopes = useCallback(async () => {\n    if (provider) {\n      try {\n        const total = await getTotalEnvelopes();\n        setTotalEnvelopes(total);\n      } catch (error) {\n        console.error('Failed to fetch total envelopes:', error);\n      }\n    }\n  }, [provider, getTotalEnvelopes]);\n\n  useEffect(() => {\n    fetchTotalEnvelopes();\n  }, [fetchTotalEnvelopes, lastUpdateTime]);\n\n  const handleCreateEnvelope = async () => {\n    try {\n      const txHash = await createEnvelope();\n      if (txHash) {\n        alert(TEXT.CREATE_SUCCESS + txHash);\n        setLastUpdateTime(Date.now());\n      }\n    } catch (error: any) {\n      console.error('Create envelope failed:', error);\n      let errorMessage = TEXT.CREATE_FAILED;\n      \n      if (error.message && error.message.includes('insufficient funds')) {\n        errorMessage = TEXT.INSUFFICIENT_FUNDS;\n      } else if (error.message && error.message.includes('user rejected')) {\n        errorMessage = TEXT.USER_CANCELLED;\n      } else if (error.message && error.message.includes('connect wallet')) {\n        errorMessage = TEXT.CONNECT_FIRST;\n      }\n      \n      alert(errorMessage);\n    }\n  };\n\n  const handleClaimEnvelope = async (envelopeId: number) => {\n    try {\n      const result = await claimEnvelope(envelopeId);\n      if (result) {\n        setLastUpdateTime(Date.now());\n      }\n      return result;\n    } catch (error: any) {\n      console.error('Claim envelope failed:', error);\n      throw error;\n    }\n  };\n\n  const handleGetEnvelope = useCallback(async (envelopeId: number) => {\n    return await getEnvelope(envelopeId);\n  }, [getEnvelope]);\n\n  const handleHasUserClaimed = useCallback(async (envelopeId: number, userAddress: string) => {\n    return await hasUserClaimed(envelopeId, userAddress);\n  }, [hasUserClaimed]);\n\n  return (\n    <div style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}>\n      <div style={{\n        background: 'rgba(255, 255, 255, 0.1)',\n        backdropFilter: 'blur(10px)',\n        borderBottom: '1px solid rgba(255, 255, 255, 0.2)'\n      }}>\n        <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          padding: '0 20px'\n        }}>\n          <h1 style={{\n            color: 'white',\n            margin: '20px 0',\n            fontSize: '28px',\n            fontWeight: 'bold'\n          }}>\n            {TEXT.TITLE}\n          </h1>\n          <WalletConnection\n            account={account}\n            isConnecting={isConnecting}\n            onConnect={connectWallet}\n            onDisconnect={disconnectWallet}\n          />\n        </div>\n      </div>\n\n      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 20px' }}>\n        {account ? (\n          <>\n            <ContractInfo \n              contractAddress={contractAddress}\n              totalEnvelopes={totalEnvelopes}\n            />\n            \n            <div style={{ \n              display: 'grid', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(500px, 1fr))', \n              gap: '20px',\n              margin: '20px 0'\n            }} className=\"grid-responsive\">\n              <EnvelopeCreator\n                onCreateEnvelope={handleCreateEnvelope}\n                loading={loading}\n              />\n              \n              <EnvelopeViewer\n                onQueryEnvelope={handleGetEnvelope}\n                onClaimEnvelope={handleClaimEnvelope}\n                onCheckClaimed={handleHasUserClaimed}\n                userAddress={account}\n                loading={loading}\n              />\n            </div>\n          </>\n        ) : (\n          <div style={{\n            textAlign: 'center',\n            padding: '100px 20px',\n            color: 'white'\n          }}>\n            <div style={{\n              background: 'rgba(255, 255, 255, 0.1)',\n              backdropFilter: 'blur(10px)',\n              borderRadius: '20px',\n              padding: '50px',\n              maxWidth: '600px',\n              margin: '0 auto'\n            }} className=\"fade-in\">\n              <h2 style={{ fontSize: '48px', margin: '0 0 20px 0' }}>ðŸ§§</h2>\n              <h2 style={{ marginBottom: '20px' }}>{TEXT.WELCOME_TITLE}</h2>\n              <p style={{ fontSize: '18px', lineHeight: '1.6', marginBottom: '30px' }}>\n                {TEXT.WELCOME_DESC1}<br/>\n                {TEXT.WELCOME_DESC2}\n              </p>\n              <div style={{ fontSize: '16px', color: '#ddd', marginBottom: '30px' }}>\n                {TEXT.FEATURE_1}<br/>\n                {TEXT.FEATURE_2}<br/>\n                {TEXT.FEATURE_3}<br/>\n                {TEXT.FEATURE_4}\n              </div>\n              <p style={{ fontSize: '16px', color: '#f39c12' }}>\n                {TEXT.CONNECT_PROMPT}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div style={{\n        textAlign: 'center',\n        padding: '40px 20px',\n        color: 'rgba(255, 255, 255, 0.7)',\n        fontSize: '14px'\n      }}>\n        <p>{TEXT.FOOTER_1}</p>\n        <p>{TEXT.FOOTER_2}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;